:py:mod:`qrem.cn.mitigation`
============================

.. py:module:: qrem.cn.mitigation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   qrem.cn.mitigation.mitigate_marginal
   qrem.cn.mitigation.mitigate_marginal_state_dependent
   qrem.cn.mitigation.mitigate_marginals
   qrem.cn.mitigation.get_marginal_inverse_noise_matrix
   qrem.cn.mitigation.get_clusters_in_marginal_list
   qrem.cn.mitigation.mitigate_marginal_product
   qrem.cn.mitigation.mitigate_marginals_product



.. py:function:: mitigate_marginal(marginal: Tuple, results_dictionary: Dict[str, Dict[str, int]], noise_model: type[qrem.qtypes.CNModelData], threshold: float, ensure_proper_probability_distribution: bool = False, check_inverse_noise_matrix_norm: bool = True) -> numpy.array

   A basic function performing CN noise model based mitigation of a single marginal probability distribution
   by acting on it with an appropriate inverse noise matrix. Used in mitigation routines.

   :param marginal: A tuple of qubits indices specifying the marginal e.g. (0,1)
   :type marginal: tuple
   :param result_dictionary: A nested dictionary with experimental results to be mitigated. Key corresponds to bitstring encoding input state, values to a dictionary with results bitstrings and counts
   :param noise_model: an object of CNModelData class storing CN noise model data
   :type noise_model: object of CNModelData class
   :param ensure_proper_probability_distribution: a boolean specifying whether mitigated pseudo probability distribution should be projected onto proper probability distribution, by default set to False
   :type ensure_proper_probability_distribution: bool
   :param check_inverse_noise_matrix_norm: a boolean specifying whether norm of inverse noise matrices should be checked during mitigation (the norm is connected with bound on error mitigation), by default set to True
   :type check_inverse_noise_matrix_norm: bool
   :param threshold: sets threshold for acceptance of inverse noise matrix norm (see above), by default set to 3
   :type threshold: float

   :returns: a numpy array with marginal (pseudo) marginal probability distribution
   :rtype: mitigated_marginal_probability_distribution


.. py:function:: mitigate_marginal_state_dependent(marginal: Tuple, results_dictionary: Dict[str, Dict[str, int]], noise_model: type[qrem.qtypes.CNModelData], threshold: float, ensure_proper_probability_distribution: bool = False, check_inverse_noise_matrix_norm: bool = True) -> numpy.array

   A basic function performing CN noise model based mitigation of a single marginal probability distribution
   by acting on it with an appropriate inverse noise matrix. Used in mitigation routines.

   :param marginal: A tuple of qubits indices specifying the marginal e.g. (0,1)
   :type marginal: tuple
   :param result_dictionary: A nested dictionary with experimental results to be mitigated. Key corresponds to bitstring encoding input state, values to a dictionary with results bitstrings and counts
   :param noise_model: an object of CNModelData class storing CN noise model data
   :type noise_model: object of CNModelData class
   :param ensure_proper_probability_distribution: a boolean specifying whether mitigated pseudo probability distribution should be projected onto proper probability distribution, by default set to False
   :type ensure_proper_probability_distribution: bool
   :param check_inverse_noise_matrix_norm: a boolean specifying whether norm of inverse noise matrices should be checked during mitigation (the norm is connected with bound on error mitigation), by default set to True
   :type check_inverse_noise_matrix_norm: bool
   :param threshold: sets threshold for acceptance of inverse noise matrix norm (see above), by default set to 3
   :type threshold: float

   :returns: a numpy array with marginal (pseudo) marginal probability distribution
   :rtype: mitigated_marginal_probability_distribution


.. py:function:: mitigate_marginals(marginals_list: List[Tuple], results_dictionary: Dict[str, Dict[str, int]], noise_model: type[qrem.qtypes.CNModelData], ensure_proper_probability_distribution=True, check_inverse_noise_matrix_norm: bool = True, threshold: float = 2000, state_independent_mitigation: bool = True) -> Dict[str, Dict[tuple[int], numpy.array]]

   A  function performing CN noise model based mitigation for marginal probability distributions specified by a marginals list.
   Used in mitigation routines. Mitigation is performed by multiplying marginal probability distributions by inverse noise matrices.

   :param marginals_list: A list of tuples encoding marginals e.g. [(0,1),(4,6)]
   :type marginals_list: List[tuple]
   :param result_dictionary: A nested dictionary with experimental results to be mitigated. Key corresponds to bitstring encoding input state, values to a dictionary with results bitstrings and counts
   :param noise_model: an object of CNModelData class
   :type noise_model: object of CNModelData class
   :param ensure_proper_probability_distribution: a boolean specifying whether mitigated pseudo probability distribution should be projected onto proper probability distribution, by default set to False
   :type ensure_proper_probability_distribution: bool
   :param check_inverse_noise_matrix_norm: a boolean specifying whether norm of inverse noise matrices should be checked during mitigation (the norm is connected with bound on error mitigation), by default set to True
   :type check_inverse_noise_matrix_norm: bool
   :param threshold: sets threshold for acceptance of inverse noise matrix norm (see above), by default set to 3
   :type threshold: float

   :returns: * **a nested dictionary {input bitstring** (*{(subset_tuple): marginal_probability_distributution}}, where input bitstring encodes input setting, subset_tuple encodes qubits in the marginal,*)
             * *and marginal_probability_distributution is a (pseudo) probability distribution*


.. py:function:: get_marginal_inverse_noise_matrix(noise_model: type[qrem.qtypes.CNModelData], clusters_in_marginal_list: List[Tuple]) -> numpy.array

   Function determines inverse noise matrix for a given marginal. It is used as a step in mitigation_marginal function.
   The matrix is constructed as a tensor product on inverse noise matrices involved in a marginal, when it is necessary
   the matrix is permuted to ensure proper ordering of qubits indices. E.g. for a cluster_in_marginal_list
   [(0,2),(1,3)], the returned matrix corresponds to qubits ordered as (0,1,2,3).


   :param noise_model: An object of CNModelData class
   :type noise_model: object of CNModelData class
   :param clusters_in_marginal_list: A list of tuples with clusters involved in the marginal

   :returns: * *An inverse noise matrix for qubits specified in clusters_in_marginal_list, qubits are sorted in ascending order*
             * *(e.g. for a clusters_in_marginal_list =[(0,4),(1,8)], indices of the inverse noise matrix indices correspond to qubits in the order (0,1,4,8) )*


.. py:function:: get_clusters_in_marginal_list(marginal: Tuple[int], noise_model: type[qrem.qtypes.CNModelData]) -> List[Tuple]

   Function creates a list of clusters that are involved in a marginal. Used in mitigation routines.
   For a given marginal inspects provided noise model and checks clusters membership of qubits form
   marginal.

   :param marginal: A tuple specifying marginal
   :type marginal: tuple
   :param noise_model: An object of CNModelData class
   :type noise_model: object of CNModelData class

   :returns: A list of tuples involved in the input marginal
   :rtype: clusters_in_marginal_list


.. py:function:: mitigate_marginal_product(marginal: Tuple, results_dictionary: Dict[str, Dict[str, int]], noise_model: type[qrem.qtypes.CNModelData], ensure_proper_probability_distribution: bool = False) -> numpy.array


.. py:function:: mitigate_marginals_product(marginals_list: List[Tuple], results_dictionary: Dict[str, Dict[str, int]], noise_model: type[qrem.qtypes.CNModelData], ensure_proper_probability_distribution=False) -> Dict[str, Dict[tuple[int], numpy.array]]


