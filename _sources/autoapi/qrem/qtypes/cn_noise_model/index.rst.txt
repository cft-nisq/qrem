:py:mod:`qrem.qtypes.cn_noise_model`
====================================

.. py:module:: qrem.qtypes.cn_noise_model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   qrem.qtypes.cn_noise_model.CNModelData



Functions
~~~~~~~~~

.. autoapisummary::

   qrem.qtypes.cn_noise_model._t1
   qrem.qtypes.cn_noise_model._t2



Attributes
~~~~~~~~~~

.. autoapisummary::

   qrem.qtypes.cn_noise_model._qubits_in_cluster_1


.. py:class:: CNModelData(number_of_qubits: int)


   Bases: :py:obj:`qrem.qtypes.datastructure_base.DataStructureBase`

   Handles data for the Clusters and Neighbors (CN) noise model in quantum systems.

   This class is used for storing results from the CN noise model reconstruction algorithm and for mitigating readout errors
   on marginal probability distributions.

   :param number_of_qubits: The total number of qubits in the quantum system.
   :type number_of_qubits: int

   .. attribute:: clusters_tuple

      Information about clusters of qubits, where each tuple contains indices of qubits belonging to a cluster  e.g. ((0,2),(1,3).

      :type: Tuple[Tuple]

   .. attribute:: noise_matrices

      Noise matrices associated with each cluster, indexed by tuples of qubit indices. Eg. (0:2) : [[0.8,0,0,0], [0.2,1,0.1,0],[0,0,0.9,0],[0,0,0,1]].

      :type: Dict[Tuple,NDArray]

   .. attribute:: inverse_noise_matrices

      Inverse of the noise matrices, computed and stored for each cluster.  This property is filled automatically when noise_matrices property is set via set_noise_matrices_dictionary method.

      :type: dict

   .. attribute:: qubit_in_cluster_membership

      Maps individual qubits to the cluster they belong to. Key in the dictionary is a tuple constructed form a qubit index. Corresponding value is a cluster to which the qubit belongs.
      E.g. (2,) : (0,2,5). This property is filled automatically when noise_matrices property is set via set_noise_matrices_dictionary method

      :type: Dict[Tuple,Tuple]

   .. attribute:: composite_inverse_noise_matrices

      Stores the composite inverse noise matrices for different qubit combinations.

      :type: dict

   .. attribute:: clusters_neighborhoods

      Information about the neighborhoods of each cluster.

      :type: dict

   .. method:: set_noise_model :

      Sets up the noise model by initializing clusters, noise matrices, and their inverses.

   .. method:: compute_extended_inverse_noise_matrices :

      Computes the extended inverse noise matrix for a given marginal.

   .. method:: get_clusters_in_marginal_list :

      Returns the list of clusters involved in a specified marginal.

   .. method:: ...



   .. rubric:: Examples

   >>> model = CNModelData(number_of_qubits=5)
   >>> model.set_noise_model({_qubits_in_cluster_1: _noise_matrix_1, _qubits_in_cluster_2: _noise_matrix_2})
   >>> print(model.clusters_tuple)
   ((_qubits_in_cluster_1,), (_qubits_in_cluster_2,))

   .. py:method:: _establish_qubit_in_cluster_dictionary()

      Method used to establish membership of qubits in clusters.
      It constructs a dictionary with key - tuple consisting of a qubit index e.g. (0,) and value - tuple storing corresponding cluster e.g. (0,3)
      It is automatically called when set_clusters_tuple method is used.



   .. py:method:: _compute_inverse_noise_matrices()

      Method that creates inverse noise matrix dictionary for an instance of CN noise model.
      In the dictionary key corresponds to a tuple storing a cluster, and value to an numpy array storing inverse noise matrix e.g. (0,5): 4 by 4 numpy array.
      It is automatically called when set_noise_matrices_dictionary is used.



   .. py:method:: set_clusters_tuple(clusters_tuple: tuple)

      Method fills clusters_tuple property. It is called when properties of a CN noise model are established via set_noise_model method.
      In addition the method calls _establish_qubit_in_cluster_dictionary, which fills qubit_in_cluster_membership property



   .. py:method:: set_clusters_neighborhoods(clusters_neighborhoods: Dict[tuple, tuple])

      Method fills clusters_neighborhoods property. It is called when properties of a CN noise model are established via set_noise_model method.
      In addition the method calls _establish_qubit_in_cluster_dictionary, which fills qubit_in_cluster_membership property



   .. py:method:: set_noise_matrices_dictionary(noise_matrices_dictionary: Dict)

      Method fills noise_matrices property. It is called when properties of a CN noise model are established via set_noise_model method.
      In addition the method calls _compute_inverse_noise_matrices, which fills inverse_noise_matrices property.

      :param noise_matrices_dictionary: Dictionary storing noise matrices for a CN noise model. Key in the dictionary is a tuple with indices of qubits belonging to a cluster.
                                        Corresponding value is an array storing noise matrix associated with the cluster. Eg. (0:2) : [[0.8,0,0,0], [0.2,1,0.1,0],[0,0,0.9,0],[0,0,0,1]].
      :type noise_matrices_dictionary: dictionary (key - tuple of integers, value - array)


   .. py:method:: set_noise_model(noise_matrices_dictionary)

      Main method used to fill properties of CN noise model. The following properties are filled when the method is called:
      1) clusters_tuple
      2) qubit_in_cluster_membership
      3) noise_matrices
      4) inverse_noise_matrices


      :param noise_matrices_dictionary: Dictionary storing noise matrices for a CN noise model. Key in the dictionary is a tuple with indices of qubits belonging to a cluster.
                                        Corresponding value is an array storing noise matrix associated with the cluster. Eg. (0:2) : [[0.8,0,0,0], [0.2,1,0.1,0],[0,0,0.9,0],[0,0,0,1]].
      :type noise_matrices_dictionary: dictionary (key - tuple of integers, value - array)


   .. py:method:: compute_extended_inverse_noise_matrices(clusters_in_marginal_list: List[Tuple]) -> numpy.array

      Function determines inverse noise matrix for a given marginal. It is used as a step in mitigation_marginal function.
      The matrix is constructed as a tensor product on inverse noise matrices involved in a marginal, when it is necessary
      the matrix is permuted to ensure proper ordering of qubits indices. E.g. for a cluster_in_marginal_list
      [(0,2),(1,3)], the returned matrix corresponds to qubits ordered as (0,1,2,3).


      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class
      :param clusters_in_marginal_list: A list of tuples with clusters involved in the marginal

      :returns: * *An inverse noise matrix for qubits specified in clusters_in_marginal_list, qubits are sorted in ascending order*
                * *(e.g. for a clusters_in_marginal_list =[(0,4),(1,8)], indices of the inverse noise matrix indices correspond to qubits in the order (0,1,4,8) )*


   .. py:method:: get_clusters_in_marginal_list(marginal: Tuple[int]) -> List[Tuple]

      Function creates a list of clusters that are involved in a marginal. Used in mitigation routines.
      For a given marginal inspects provided noise model and checks clusters membership of qubits form
      marginal.

      :param marginal: A tuple specifying marginal
      :type marginal: tuple
      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class

      :returns: A list of tuples involved in the input marginal
      :rtype: clusters_in_marginal_list


   .. py:method:: get_clusters_and_neighborhoods_in_marginal_dictionary(marginal: Tuple[int]) -> Dict[Tuple[int], Tuple[int]]

      Function creates a list of clusters that are involved in a marginal. Used in mitigation routines.
      For a given marginal inspects provided noise model and checks clusters membership of qubits form
      marginal.

      :param marginal: A tuple specifying marginal
      :type marginal: tuple
      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class

      :returns: A list of tuples involved in the input marginal
      :rtype: clusters_in_marginal_list


   .. py:method:: get_neighbors_in_marginal(marginal: Tuple[int]) -> Dict[Tuple[int], Tuple[int]]

      Function creates a dictionary with clusters and neighbors that belong to a marginal (it can happen that clusters' neighbors do not belong to other clusters that form a marginal .
      For a given marginal, and clusters and neighbors, membership of neighbors in the marginal is checked

      :param marginal: A tuple specifying marginal
      :type marginal: tuple
      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class

      :returns: A list of tuples involved in the input marginal
      :rtype: clusters_in_marginal_list


   .. py:method:: get_noise_matrices_indexes(marginal: Tuple[int], state)

      Function creates a dictionary with indices of state dependent noise matrices that should be used to compute noise matrix inverse,

      It is used during error  mitigation of CN noise model with neighbors.

      :param marginal: A tuple specifying marginal
      :type marginal: tuple
      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class

      :returns: A dictionary with a key - cluster and value - tuple of indicies to be averaged over or a string 'averaged'
      :rtype: neighbors_indices_to_compute_average


   .. py:method:: compute_extended_inverse_noise_matrices_state_dependent(clusters_in_marginal_list: List[Tuple], marginal, state) -> numpy.array

      Function determines inverse noise matrix for a given marginal. It is used as a step in mitigation_marginal function.
      The matrix is constructed as a tensor product on inverse noise matrices involved in a marginal, when it is necessary
      the matrix is permuted to ensure proper ordering of qubits indices. E.g. for a cluster_in_marginal_list
      [(0,2),(1,3)], the returned matrix corresponds to qubits ordered as (0,1,2,3).


      :param noise_model: An object of CNModelData class
      :type noise_model: object of CNModelData class
      :param clusters_in_marginal_list: A list of tuples with clusters involved in the marginal

      :returns: * *An inverse noise matrix for qubits specified in clusters_in_marginal_list, qubits are sorted in ascending order*
                * *(e.g. for a clusters_in_marginal_list =[(0,4),(1,8)], indices of the inverse noise matrix indices correspond to qubits in the order (0,1,4,8) )*


   .. py:method:: compute_specific_state_dependent_noise_matrix(cluster: Tuple[int], indicies: Tuple[Tuple[int]]) -> numpy.array



.. py:function:: _t1(test_model: type[CNModelData])


.. py:function:: _t2(test_model: type[CNModelData])


.. py:data:: _qubits_in_cluster_1
   :value: (0, 3)

   

