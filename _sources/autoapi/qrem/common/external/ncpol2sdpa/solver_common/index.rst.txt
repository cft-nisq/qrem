:py:mod:`qrem.common.external.ncpol2sdpa.solver_common`
=======================================================

.. py:module:: qrem.common.external.ncpol2sdpa.solver_common

.. autoapi-nested-parse::

   Created on Fri May 22 18:05:24 2015

   @author: Peter Wittek



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   qrem.common.external.ncpol2sdpa.solver_common.autodetect_solvers
   qrem.common.external.ncpol2sdpa.solver_common.solve_sdp
   qrem.common.external.ncpol2sdpa.solver_common.find_solution_ranks
   qrem.common.external.ncpol2sdpa.solver_common.get_sos_decomposition
   qrem.common.external.ncpol2sdpa.solver_common.get_facvar_of_monomial
   qrem.common.external.ncpol2sdpa.solver_common.get_recursive_xmat_value
   qrem.common.external.ncpol2sdpa.solver_common.get_xmat_value
   qrem.common.external.ncpol2sdpa.solver_common.extract_dual_value



.. py:function:: autodetect_solvers(solverparameters)


.. py:function:: solve_sdp(sdp, solver=None, solverparameters=None)

   Call a solver on the SDP relaxation. Upon successful solution, it
   returns the primal and dual objective values along with the solution
   matrices.

   :param sdpRelaxation: The SDP relaxation to be solved.
   :type sdpRelaxation: :class:`ncpol2sdpa.SdpRelaxation`.
   :param solver: The solver to be called, either `None`, "sdpa", "mosek",
                  "cvxpy", "scs", or "cvxopt". The default is `None`,
                  which triggers autodetect.
   :type solver: str.
   :param solverparameters: Parameters to be passed to the solver. Actual
                            options depend on the solver:

                            SDPA:

                              - `"executable"`:
                                Specify the executable for SDPA. E.g.,
                                `"executable":"/usr/local/bin/sdpa"`, or
                                `"executable":"sdpa_gmp"`
                              - `"paramsfile"`: Specify the parameter file

                            Mosek:
                            Refer to the Mosek documentation. All
                            arguments are passed on.

                            Cvxopt:
                            Refer to the PICOS documentation. All
                            arguments are passed on.

                            Cvxpy:
                            Refer to the Cvxpy documentation. All
                            arguments are passed on.

                            SCS:
                            Refer to the Cvxpy documentation. All
                            arguments are passed on.
   :type solverparameters: dict of str.
   :returns: tuple of the primal and dual optimum, and the solutions for the
             primal and dual.
   :rtype: (float, float, list of `numpy.array`, list of `numpy.array`)


.. py:function:: find_solution_ranks(sdp, xmat=None, baselevel=0)

   Helper function to detect rank loop in the solution matrix.

   :param sdp: The SDP relaxation.
   :type sdp: :class:`ncpol2sdpa.sdp`.
   :param x_mat: Optional parameter providing the primal solution of the
                 moment matrix. If not provided, the solution is extracted
                 from the sdp object.
   :type x_mat: :class:`numpy.array`.
   :param base_level: Optional parameter for specifying the lower level
                      relaxation for which the rank loop should be tested
                      against.
   :type base_level: int.
   :returns: list of int -- the ranks of the solution matrix with in the
             order of increasing degree.


.. py:function:: get_sos_decomposition(sdp, y_mat=None, threshold=0.0)

   Given a solution of the dual problem, it returns the SOS
   decomposition.

   :param sdp: The SDP relaxation to be solved.
   :type sdp: :class:`ncpol2sdpa.sdp`.
   :param y_mat: Optional parameter providing the dual solution of the
                 moment matrix. If not provided, the solution is extracted
                 from the sdp object.
   :type y_mat: :class:`numpy.array`.
   :param threshold: Optional parameter for specifying the threshold value
                     below which the eigenvalues and entries of the
                     eigenvectors are disregarded.
   :type threshold: float.
   :returns: The SOS decomposition of [sigma_0, sigma_1, ..., sigma_m]
   :rtype: list of :class:`sympy.core.exp.Expr`.


.. py:function:: get_facvar_of_monomial(monomial, sdp)


.. py:function:: get_recursive_xmat_value(k, row_offsets, sdp, x_mat)


.. py:function:: get_xmat_value(monomial, sdp, x_mat=None)


.. py:function:: extract_dual_value(sdp, monomial, blocks=None)

   Given a solution of the dual problem and a monomial, it returns the
   inner product of the corresponding coefficient matrix and the dual
   solution. It can be restricted to certain blocks.

   :param sdp: The SDP relaxation.
   :type sdp: :class:`ncpol2sdpa.sdp`.
   :param monomial: The monomial for which the value is requested.
   :type monomial: :class:`sympy.core.exp.Expr`.
   :param monomial: The monomial for which the value is requested.
   :type monomial: :class:`sympy.core.exp.Expr`.
   :param blocks: Optional parameter to specify the blocks to be included.
   :type blocks: list of `int`.
   :returns: The value of the monomial in the solved relaxation.
   :rtype: float.


