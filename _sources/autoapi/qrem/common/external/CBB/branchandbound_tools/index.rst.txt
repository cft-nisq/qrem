:py:mod:`qrem.common.external.CBB.branchandbound_tools`
=======================================================

.. py:module:: qrem.common.external.CBB.branchandbound_tools

.. autoapi-nested-parse::

   Created on Wed Nov 22 23:50:46 2017

   @author: Flavio Baccari



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   qrem.common.external.CBB.branchandbound_tools.get_triang_ineqs
   qrem.common.external.CBB.branchandbound_tools.get_det_guess
   qrem.common.external.CBB.branchandbound_tools.get_bound_from_det
   qrem.common.external.CBB.branchandbound_tools.get_strengthen_low
   qrem.common.external.CBB.branchandbound_tools.get_Mom
   qrem.common.external.CBB.branchandbound_tools.get_up_and_low
   qrem.common.external.CBB.branchandbound_tools.get_branching_node
   qrem.common.external.CBB.branchandbound_tools.get_as_coeffs
   qrem.common.external.CBB.branchandbound_tools.get_sup
   qrem.common.external.CBB.branchandbound_tools.get_groundBandB



.. py:function:: get_triang_ineqs(spins)

   Generate the list of triangle inequalities involving the given spin
   variables

   :param spins: list of spin variables
   :type spins: list of sympy.core.symbol.Symbol
   :returns: list of sympy.core.add.Add


.. py:function:: get_det_guess(s_variables, cliques, Mom, one, two)

   Obtains the closest spin configuration from the moment matrix resulting from
   the lower bound SDP

   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol
   :param Mom: the block moment matrix at level 1
   :type Mom: list of numpy.ndarray
   :param one: coefficients of the one-body terms in the hamiltonian
   :type one: list of float
   :param two: coefficients of the two-body terms in the hamiltonian as a matrix
   :type one: list of list of float


   :returns: the deterministic configuration final_config as list of floats


.. py:function:: get_bound_from_det(config, one, two)

   Gets the energy of the corresponding configuration

   :param config: the spin configuration
   :type config: list of float
   :param one: coefficients of the one-body terms in the hamiltonian
   :type one: list of float
   :param two: coefficients of the two-body terms in the hamiltonian as a matrix
   :type one: list of list of float


   :returns: the upper bound to the ground state energy as float


.. py:function:: get_strengthen_low(s_variables, substitutions, hamiltonian, cliques, threshold, solverparameters=None, verbose=0)

   Runs the relaxation for the first time and determines how many triangle inequalities
   to add to get a reasonably good lower bound. Outputs the corresponding lower bound
   as well

   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param substitutions: substitution to be applied in the generation of the moment matrix at the level of operators
   :type substitutions: dict of items of polynomials of sympy.core.symbol.Symbol
   :param hamiltonian: hamiltonian of the problem as a symbolic polynomial of the spins
   :type hamiltonian: sympy.core.add.Add
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol
   :param threshold: threshold clique size n_t under which generats blocks at level 2
   :type threshold: int
   :param solverparameters: parameters for the SDP solver
   :type solverparameters: dict
   :param verbose: verbosity level
   :type verbose: int

   :returns: sdp as ncpol2sdpa sdp class, list of triangle inequalities to add as
   list of sympy.core.add.Add


.. py:function:: get_Mom(sdp, cliques)

   Extract the level 1 moment matrix from the solved sdp problem

   :param spd: SDP problem generated by ncpol2sdpa
   :type sdp: ncpol2sdpa.sdp_relaxation.SdpRelaxation
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol


   :returns: the level 1 the block moment matrix Mom as list of numpy.ndarray,
   the average spin values as list of numpy.ndarray


.. py:function:: get_up_and_low(s_variables, substitutions, ineqs, hamiltonian, one, two, cliques, threshold, solverparameters=None, verbose=0)

   Gets upper and lower bound for the given instance of branching

   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param substitutions: substitution to be applied in the generation of the moment matrix at the level of operators
   :type substitutions: dict of items of polynomials of sympy.core.symbol.Symbol
   :param ineqs: triangle inequalities to be added to improve the lower bound
   :type ineqs: list of sympy.core.add.Add
   :param hamiltonian: hamiltonian of the problem as a symbolic polynomial of the spins
   :type hamiltonian: sympy.core.add.Add
   :param one: coefficients for the one-body terms in the hamiltonian
   :type one: list of floats
   :param two: coefficients for the two-body terms in the hamiltonian
   :type two: list of floats
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol
   :param threshold: threshold clique size n_t under which generats blocks at level 2
   :type threshold: int
   :param solverparameters: parameters for the SDP solver
   :type solverparameters: dict
   :param verbose: verbosity level
   :type verbose: int

   :returns: lower bound as float, upper bound as float, spin expectation values
   extracted from the moment matrix for each clique as list of array of floats,
   the deterministic configuration for each spin as list of floats


.. py:function:: get_branching_node(spins, s_variables, cliques, eqs)

   Gets the spin on which to perform the next branching. Works with an "easy-first"
   choice

   :param spins: the spin average values extracted from the moment matrix
   :type spins: list of floats
   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol
   :param eqs: list of already implemented branching choices
   :type eqs: list of sympy.core.add.Add

   :returns: the spin variable of the branching node as sympy.core.symbol.Symbol


.. py:function:: get_as_coeffs(hamiltonian, s_variables)

   Extracts the one and two-body coefficients from the symbolic hamiltonian

   :param hamiltonian: hamiltonian of the problem as a symbolic polynomial of the spins
   :type hamiltonian: sympy.core.add.Add
   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol

   :returns: the one-body coeffs as list of float, the two-body coeffs as list
   of list of float


.. py:function:: get_sup(s_variables, eqs)

   Gets the spin variables on which the branching has alreadu been performed

   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param eqs: list of already implemented branching choices
   :type eqs: list of sympy.core.add.Add

   :returns: support of the branching equations as list of sympy.core.symbol.Symbol


.. py:function:: get_groundBandB(s_variables, substitutions, hamiltonian, cliques, threshold=3, verbose=0)

   Runs the whole branch&bound algorithm for the given hamiltonian

   :param s_variables: list of spin variables
   :type s_variables: list of sympy.core.symbol.Symbol
   :param substitutions: substitution to be applied in the generation of the moment matrix at the level of operators
   :type substitutions: dict of items of polynomials of sympy.core.symbol.Symbol
   :param hamiltonian: hamiltonian of the problem as a symbolic polynomial of the spins
   :type hamiltonian: sympy.core.add.Add
   :param cliques: list of the cliques of the chordal extension
   :type cliques: list of lists of sympy.core.symbol.Symbol
   :param threshold: threshold clique size n_t under which generats blocks at level 2
   :type threshold: int
   :param solverparameters: parameters for the SDP solver
   :type solverparameters: dict
   :param verbose: verbosity level
   :type verbose: int

   :returns z_low: final lower bound as float
   :returns z_up: final upper bound as float
   :returns final_config: final ground state configuration as list of floats


