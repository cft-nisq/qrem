{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Error mitigation tutorial\n",
    "\n",
    "The purpose of this tutorial is to demonstrate the basic use of error mitigation routines of  the QREM package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qrem.cn import simulation as cnsimulation \n",
    "from qrem.mitigation import mitigation_routines\n",
    "from qrem.benchmarks import hamiltonians\n",
    "from qrem.characterization import characterization_routine\n",
    "from datetime import date\n",
    "from qrem.providers import simulation as simulate_experiment\n",
    "from qrem.qtypes.characterization_data import CharacterizationData\n",
    "from qrem.qtypes.mitigation_data import MitigationData\n",
    "from qrem.visualisation import benchmark_plots_functions"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='Overview'></a>\n",
    "### List of contents \n",
    "\n",
    "\n",
    "1. [Data generation for mitigation routine](#Part1)\n",
    "\n",
    "    1.1 [Creation and execution of the experiments on simulators/real quantum hardware](#Part1)\n",
    "    \n",
    "    1.2. [Execution of the characterization routine](#Characterization)\n",
    "\n",
    "2. [Mitigation workflow](#Mitigation)\n",
    "\n",
    "    2.1 [Initial steps](#InitialS)\n",
    "\n",
    "    2.2 [Error mitigation execution](#MExecution)\n",
    "\n",
    "    2.3 [Performance analysis](#PAnalysis)\n",
    "\n",
    "    2.4 [Visualization](#Visualization)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='Part1'></a>\n",
    "\n",
    "### 1.1.1 Preparation of experiments characterizing readout noise\n",
    "\n",
    "The first step in experiment preparation is creation of characterization circuits. \n",
    "This requires specifying the following parameters: \n",
    "\n",
    "1. number_of_qubits - a variable describing number of qubits for which characterization is going to be performed. Note that number_of_qubits is not necessarily equal to the total numbers of qubits in a device, as one may be interested in characterization  only a subset of all qubits. In the example below we set number of qubits to 10\n",
    "\n",
    "2. experiment_name - a string specifying a typ of readout characterization experiment to be performed. QREM supports two types of characterization experiments Quantum Detector Overlapping Tomography ('QDOT') or Diagonal Detector Overlapping Tomography ('DDOT').  Here we choose 'DDOT'. \n",
    "\n",
    "3. Number of characterization circuits: number of circuits used in characterization routine.\n",
    "\n",
    "4. Number of shots (number of each circuits repetition).\n",
    "\n",
    "5. include_benchmark_circuits - a bool variable indicating whether the experiment should include circuits that are going to be used in noise model reconstruction and mitigation benchmarks  .\n",
    "\n",
    "6. number_of_benchmark_circuits - an integer specifying number of circuits used in benchmarks. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "number_of_qubits = 10\n",
    "\n",
    "experiment_type = \"DDOT\"\n",
    "\n",
    "number_of_circuits = 300\n",
    "\n",
    "number_of_shots = 10**4\n",
    "\n",
    "include_benchmark_circuits = True\n",
    "\n",
    "number_of_benchmark_circuits = 20\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### 1.1.2 Execution of the experiments on simulators/real quantum hardware\n",
    "\n",
    "Execution of characterization circuits on quantum backends requires access to quantum hardware. QREM supports backends such as IBM Quantum and AWS Bracket.  Detailed description of circuits implementation on those backends is described in tutorials .\n",
    "\n",
    "To illustrate functionalities of the package here we simulate a noise characterization experiment according to a CN noise model (see). For simplicity we do not include neighbors.\n",
    "\n",
    "To specify the noise model one needs to provide number of clusters of given locality:\n",
    "\n",
    "1. number_of_3_qubit_clusters - number of clusters of locality 3 (consisting of 3 qubits) Here set to 1.\n",
    "\n",
    "2. number_of_2_qubit_clusters - number of clusters of locality 2 (consisting of 2 qubits) Here set to 3.\n",
    "\n",
    "3. number_of_1_qubit_clusters - number of clusters of locality 1 (consisting of 3 qubits) Here set to 1.\n",
    "\n",
    "The noise model is created using cn.simulation module. It returns object of a CNNoiseModel class that stores all properties of the CN nosie model. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "number_of_3_qubit_clusters = 1\n",
    "\n",
    "number_of_2_qubit_clusters = 3\n",
    "\n",
    "number_of_1_qubit_clusters = 1\n",
    "\n",
    "noise_model_simulation=cnsimulation.create_random_noise_model(number_of_qubits=number_of_qubits,clusters_specification=[[3,number_of_3_qubit_clusters], [2, number_of_2_qubit_clusters], [1, number_of_1_qubit_clusters]])\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An object of CharacterizationData class is created, which stores all data created during characterization stage, and benchmark circuits corresponding to ground states of local Hamiltonians are created.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "characterization_data_container = CharacterizationData()\n",
    "\n",
    "characterization_data_container.experiment_type = 'DDOT' \n",
    "\n",
    "if include_benchmark_circuits:\n",
    "    \n",
    "    hamiltonians_dictionary, circuits_ground_states = hamiltonians.create_hamiltonians_and_ground_states(number_of_qubits=number_of_qubits,number_of_benchmark_circuits=number_of_benchmark_circuits)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulation of the noisy experiment is performed using simulate_noisy_experiment function that requires the following parameters:\n",
    "\n",
    "1. noise_model - an object of CNNoiseModel class, here noise_model_simulation.\n",
    "\n",
    "2. number_of_circuits - an integer specifying number of circuits used in characterization. Here number_of_circuits set in preparation stage.\n",
    "\n",
    "3. number_of_shots - an integer specifying number of shots. Here number_of_shots set in preparation stage.\n",
    "\n",
    "Results of experiment are stored in the characterization_data_container object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Possible count of random circuits (300) is lower than desired total circuit count (1315).\n",
      "10\n",
      "completeness: True\n",
      "Adding 290 random circuits to a 10-element set\n",
      "Set of 300 circuits, completeness: True\n",
      "noisy results generated in: 13.611753463745117 seconds\n",
      "\u001b[36m\u001b[1mSaving pickled file to: \u001b[0m '.'\n",
      "\u001b[36m\u001b[1mSaving pickled file to: \u001b[0m '.'\n"
     ]
    }
   ],
   "source": [
    "characterization_data_container.results_dictionary = simulate_experiment.simulate_noisy_experiment(noise_model=noise_model_simulation,number_of_circuits=number_of_circuits,number_of_shots=number_of_shots,save_data=True,new_data_format=True,ground_states_circuits=circuits_ground_states,data_directory='').counts\n",
    "\n",
    "characterization_data_container.ground_states_list  = list(characterization_data_container.results_dictionary.keys())[-number_of_benchmark_circuits:]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='Characterization'></a>\n",
    "\n",
    "### Execution of the characterization routine\n",
    "\n",
    "Execution of the characterization routine is performed. Function execute_characterization_workflow takes as an input experimental data stored in characterization_data_container object. Detailed description of the noise characterization functionalities can be found in tutorial 2 Noise Characterisation \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[36m\u001b[1mMARGINALS COMPUTATION FINISHED\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 55/55 [00:00<00:00, 3250.12it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[36m\u001b[1mREDUCED POVMS COMPUTATION FINISHED\u001b[0m\n",
      "\u001b[31m\u001b[1m\n",
      "Calculating errors of type:\u001b[0m ('worst_case', 'classical')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:00<00:00, 16723.70it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[36m\u001b[1mDONE\u001b[0m\n",
      "\u001b[36m\u001b[1mPOVMS DISTANCES COMPUTATION FINISHED\u001b[0m\n",
      "\u001b[31m\u001b[1m\n",
      "Calculating correlations of type:\u001b[0m ('worst_case', 'classical')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 45/45 [00:00<00:00, 3199.91it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[36m\u001b[1mDONE\u001b[0m\n",
      "\u001b[36m\u001b[1mPAIRWISE READOUT ERRORS CORRELATION COEFFICIENTS FINISHED\u001b[0m\n",
      "\u001b[31m\u001b[1m\n",
      "Current max cluster size:\u001b[0m 2\n",
      "\u001b[31m\u001b[1m\n",
      "Current max cluster size:\u001b[0m 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31m\u001b[1m\n",
      "Current max cluster size:\u001b[0m 4\n"
     ]
    }
   ],
   "source": [
    "characterization_data_container= characterization_routine.execute_characterization_workflow(characterization_data_container=characterization_data_container)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<a id='Mitigation'></a>\n",
    "\n",
    "### Readout error mitigation \n",
    "\n",
    "To demonstrate functionalities of mitigation module \n",
    "\n",
    "One of the results of the characterization workflow are reconstructed noise models of different locality. To demonstrate functionalities of mitigation results of error mitigation based on those models are compared to the exact noise model that was used in the simulation of the noisy experiment. \n",
    "To this end characterization_data_container is updated to include the exact noise model. This is an optional step and it is not performed when working with data coming from quantum hardware.    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "characterization_data_container.noise_model_list.append(noise_model_simulation) "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='InitialS'></a>\n",
    "\n",
    "### 2.1 Initial steps \n",
    "\n",
    "Energy of ground states prepared by the noisy device is estimated  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "20it [00:00, 2221.09it/s]\n"
     ]
    }
   ],
   "source": [
    "energy_dictionary= hamiltonians.eigenstate_energy_calculation_and_estimation(characterization_data_container.benchmark_results_dictionary ,  characterization_data_container.benchmark_marginals_dictionary ,hamiltonians_dictionary)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An object of MitigationData class is created to store results of mitigation is created\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "mitigation_data = MitigationData()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='MExecution'></a>\n",
    "\n",
    "### 2.2 Error mitigation execution\n",
    "\n",
    "Error mitigation is performed using estimate_mitigated_energy_over_noise_models function of the mitigation module. It performs mitigation for all CN noise models reconstructed during the characterization stage. For each noise model it returns a dictionary with the mitigated values of energies for Hamiltonians used in the benchmark. The corresponding data structure is a dictionary. As an input to the mitigation routine one need to specify:\n",
    "\n",
    "1. characterization_data- an object of CharacterizationData class storing results of characterization routine and experimental data, here characterization_data_container \n",
    "\n",
    "2. hamiltonians_dictionary - dictionary specifying Hamiltonians, for which ground states were implemented, here hamiltonians_dictionary\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 20/20 [00:00<00:00, 249.40it/s]\n",
      "100%|██████████| 20/20 [00:00<00:00, 267.84it/s]\n",
      "100%|██████████| 20/20 [00:00<00:00, 206.93it/s]\n",
      "100%|██████████| 20/20 [00:00<00:00, 246.86it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "noise_models_mitigation_results_dictionary = mitigation_routines.estimate_mitigated_energy_over_noise_models(characterization_data=characterization_data_container ,hamiltonians_dictionary=hamiltonians_dictionary,return_marginals=True)\n",
    "\n",
    "     \n",
    "mitigation_data.noise_models_mitigation_results_dictionary = noise_models_mitigation_results_dictionary   "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='PAnalysis'></a>\n",
    "\n",
    "### 2.4 Performance analysis\n",
    "\n",
    "To compute errors  of mitigation the exact data is compared to results obtained using error mitigation. Also some statistical features of the errors for different noise models are obtained and printed together with the corresponding clusters structure. The last results correspond to the noise model used in characterization experiment simulation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[36m\u001b[1m((0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,))\u001b[0m\n",
      "\u001b[36m\u001b[1mMitigation error mean\u001b[0m 0.5767024938191828\n",
      "\u001b[36m\u001b[1mMitigation error median\u001b[0m 0.38284537497778737\n",
      "\u001b[36m\u001b[1m((0, 3), (5, 9), (7, 8), (1, 4), (2, 6))\u001b[0m\n",
      "\u001b[36m\u001b[1mMitigation error mean\u001b[0m 0.22468234094681996\n",
      "\u001b[36m\u001b[1mMitigation error median\u001b[0m 0.16051428372192794\n",
      "\u001b[36m\u001b[1m((0, 2, 3), (5, 6, 9), (7, 8), (1, 4))\u001b[0m\n",
      "\u001b[36m\u001b[1mMitigation error mean\u001b[0m 0.07579283566475507\n",
      "\u001b[36m\u001b[1mMitigation error median\u001b[0m 0.053939441867717264\n",
      "\u001b[36m\u001b[1m((5, 6, 9), (1, 4), (7, 8), (0, 3), (2,))\u001b[0m\n",
      "\u001b[36m\u001b[1mMitigation error mean\u001b[0m 0.07181963262818221\n",
      "\u001b[36m\u001b[1mMitigation error median\u001b[0m 0.05476190095380651\n"
     ]
    }
   ],
   "source": [
    "noise_models_mitigated_energy_dictionary_error = mitigation_routines.compute_mitigation_errors(mitigation_data=mitigation_data,hamiltonian_energy_dictionary=energy_dictionary,number_of_qubits=number_of_qubits)\n",
    "\n",
    "mitigation_data.noise_models_mitigated_energy_dictionary_error = noise_models_mitigated_energy_dictionary_error \n",
    "\n",
    "noise_models_mitigated_energy_dictionary_error_statistics= mitigation_routines.compute_mitigation_error_median_mean(mitigation_data=mitigation_data, print_results=True)\n",
    "\n",
    "mitigation_data.noise_models_mitigated_energy_dictionary_error_statistics = noise_models_mitigated_energy_dictionary_error_statistics"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='Visualization'></a>\n",
    "\n",
    "### 2.4 Visualization\n",
    "\n",
    "Errors of mitigation procedure are visualized on a histogram "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "benchmark_plots_functions.create_error_mitigation_histogram(mitigation_data=mitigation_data,energy_dictionary=energy_dictionary,number_of_qubits=number_of_qubits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv_dev",
   "language": "python",
   "name": "venv_dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
